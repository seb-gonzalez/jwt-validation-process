package com.sebastian.jwt;

import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.Signature;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPublicKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 * Simple JWT processor. This is specially written for JWT generated by WSO2IS
 */
public class JWTProcessor {

	private static final Base64 base64Url = new Base64(true);
	private final static String n = "qoQah4MFGYedrbWwFc3UkC1hpZlnB2_E922yRJfHqpq2tTHL_NvjYmssVdJBgSKi36cptKqUJ0Phui9Z_kk8zMPrPfV16h0ZfBzKsvIy6_d7cWnn163BMz46kAHtZXqXhNuj19IZRCDfNoqVVxxCIYvbsgInbzZM82CB86iYPAS7piijYn1S6hueVHGAzQorOetZevKIAvbH3kJXZ4KdY6Ffz5SFDJBxC3bycN4q2JM1qnyD53vcc0MitxyIUF7a06iJb5_xXBiA-3xnTI0FU5hw_k6x-sdB5Rglx13_2aNzdWBSBAnxs1XXtZUt9_2RAUxP1XORkrBGlPg9D7cBtQ";
	private final static String e = "AQAB";

	


	
	public boolean isValid(String jwtToken) {
		
		return isValid(jwtToken, n, e);
		
	}
	
	protected boolean isValid(String jwtToken, String mod, String exp) {
		
		JSONObject jsonHeaderObject = null;
		JSONObject jsonClaimObject = null;
	
		BigInteger modulus = new BigInteger(1, base64Url.decode(mod));
		BigInteger exponent = new BigInteger(1, base64Url.decode(exp));
		RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(modulus, exponent);		
		
		

		String[] jwtTokenValues = jwtToken.split("\\.");
		String jwtAssertion = null;
		byte[] jwtSignature = null;

		if (jwtTokenValues.length > 0) {
			String value = new String(base64Url.decode(jwtTokenValues[0].getBytes()));

			JSONParser parser = new JSONParser();
			try {
				jsonHeaderObject = (JSONObject) parser.parse(value);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		if (jwtTokenValues.length > 1) {

			String value = new String(base64Url.decode(jwtTokenValues[1].getBytes()));
			//System.out.println("JWT Body : " + value);
			jwtAssertion = jwtTokenValues[0] + "." + jwtTokenValues[1];

			JSONParser parser = new JSONParser();
			try {
				jsonClaimObject = (JSONObject) parser.parse(value);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		if (jwtTokenValues.length > 2) {
			jwtSignature = base64Url.decode(jwtTokenValues[2].getBytes());
		}

		String signatureAlgo = (String) jsonHeaderObject.get("alg");

		if ("RS256".equals(signatureAlgo)) {
			signatureAlgo = "SHA256withRSA";
		} else if ("RS515".equals(signatureAlgo)) {
			signatureAlgo = "SHA512withRSA";
		} else if ("RS384".equals(signatureAlgo)) {
			signatureAlgo = "SHA384withRSA";
		} else {
			// by default
			signatureAlgo = "SHA256withRSA";
		}

		if (jwtAssertion != null && jwtSignature != null) {

			try {

				KeyFactory keyFactory = KeyFactory.getInstance("RSA");
				RSAPublicKey key = (RSAPublicKey) keyFactory.generatePublic(pubKeySpec);

				Signature signature = Signature.getInstance(signatureAlgo);
				signature.initVerify(key);
				signature.update(jwtAssertion.getBytes());
				return signature.verify(jwtSignature);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			System.err.println("Signature is null");
		}
		return false;

	}




}
